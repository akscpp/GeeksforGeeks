vector<int> maxCombinations(int N, int k, vector<int> &A, vector<int> &B) {
        // code here
        sort(A.begin(),A.end());
        sort(B.begin(),B.end());
        int n=A.size();
        priority_queue<pair<int,pair<int,int>>>pq;
        pq.push({A[n-1]+B[n-1],{n-1,n-1}});
        
        vector<int> res;
        set<pair<int,int>>s;
        s.insert({n-1,n-1});
        while(k>0){
            pair<int,pair<int,int>> p = pq.top();
            pq.pop();
            int sum=p.first;
            int x=p.second.first;
            int y=p.second.second;
            
            res.push_back(sum);
            
            if(s.find({x-1,y})==s.end()){
                pq.push({A[x-1]+B[y],{x-1,y}});
                s.insert({x-1,y});
            }
            if(s.find({x,y-1})==s.end()){
                pq.push({A[x]+B[y-1],{x,y-1}});
                s.insert({x,y-1});
            }
            k--;
        }
        return res;
        
    }
